# –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –ë–î
def add_new_member(db, cursor, member_id: int, member_name: str, chat_id):
	cursor.execute(f'INSERT INTO chat{chat_id} (user_id, first_second_name) VALUES (?, ?)', (member_id, member_name))
	db.commit()

# –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞
def update_voice_amount(conn, cursor, user_id: int, chat_id):
	cursor.execute(f'UPDATE chat{chat_id} SET voice_amount = voice_amount + 1 WHERE user_id = ?;', (user_id,))
	conn.commit()

# –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞
def update_video_note_amount(conn, cursor, user_id: str, chat_id):
	cursor.execute(f'UPDATE chat{chat_id} SET video_note_amount = video_note_amount + 1 WHERE user_id = ?;', (user_id,))
	conn.commit()

# —Å—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def update_message_amount(conn, cursor, user_id, chat_id):
	cursor.execute(f'UPDATE chat{chat_id} SET message_amount = message_amount + 1 WHERE user_id = ?;', (user_id,))
	conn.commit()


#–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def show_stat_all_message(cursor, chat_id):
	id_chat = str(chat_id).lstrip("-")
	check_query = f'SELECT user_id FROM chat{id_chat};'
	query = f'SELECT first_second_name, message_amount FROM chat{id_chat};'
	title = '<b>–¢–æ–ø —Ñ–ª—É–¥–µ—Ä–æ–≤:</b>\n'
	first_descr = '(—É—Å–Ω—É–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)'
	second_descr = '(—Ç–æ–∂–µ —É—Å–Ω—É–ª, –Ω–æ –ø–æ–∑–∂–µ)'
	stat = former_stat(cursor=cursor, check_query=check_query, query=query, title=title, first_descr=first_descr, second_descr=second_descr)
	return stat


#–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
def show_stat_voice(cursor, chat_id):
	id_chat = str(chat_id).lstrip("-")
	check_query = f'SELECT user_id FROM chat{id_chat} WHERE voice_amount > 0;'
	query = f'SELECT first_second_name, voice_amount FROM chat{id_chat} WHERE voice_amount > 0;'
	title = '<b>–¢–æ–ø –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫–æ–≤:</b>\n'
	first_descr = '(–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∏–∫—Ç–æ –Ω–µ —Å–ª—É—à–∞–µ—Ç)'
	second_descr = '(—á–µ—Ä–Ω—ã–π –ø–æ—è—Å –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º)'
	stat = former_stat(cursor=cursor, check_query=check_query, query=query, title=title, first_descr=first_descr, second_descr=second_descr)
	return stat


#–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
def show_stat_video_note(cursor, chat_id):
	id_chat = str(chat_id).lstrip("-")
	check_query = f'SELECT user_id FROM chat{id_chat} WHERE video_note_amount > 0;'
	query = f'SELECT first_second_name, video_note_amount FROM chat{id_chat} WHERE video_note_amount > 0;'
	title = '<b>–¢–æ–ø –≤–∏–¥–µ–æ–±–ª–æ–≥–µ—Ä–æ–≤:</b>\n'
	first_descr = '(–Ω–µ –∑–Ω–∞–µ—Ç –∫–∞–∫ –≤ —Ç–≥ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ)'
	stat = former_stat(cursor=cursor, check_query=check_query, query=query, title=title, first_descr=first_descr)
	return stat

def former_stat(cursor, check_query, query, title, first_descr='', second_descr=''):
	cursor.execute(check_query)
	if len(cursor.fetchall()) < 3:
		return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
	cursor.execute(query)
	members = cursor.fetchall()
	members.sort(key=lambda x: int(x[1]), reverse=True)
	result = ''
	for position, member in enumerate(members, 1):
		name, amount = member
		if position == 1:
			result += f'<u>{position})</u> ü•á <i>{name}</i>: <b>{amount}</b> {first_descr}\n'
		elif position == 2:
			result += f'<u>{position})</u> ü•à <i>{name}</i>: <b>{amount}</b> {second_descr}\n'
		elif position == 3:
			result += f'<u>{position})</u> ü•â <i>{name}</i>: <b>{amount}</b>\n'
		else:
			result += f'<u>{position})</u> ‚ûñ <i>{name}</i>: <b>{amount}</b>\n'
	return title + result


def check_table_in_db(cursor, id_chat):
	cursor.execute(f"SELECT count(name) FROM sqlite_master WHERE type='table' AND name='chat{id_chat}';")
	return cursor.fetchone()[0]